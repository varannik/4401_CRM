name: CI - Build and Test

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '4401_CRM/next/**'
      - '.github/workflows/**'
  push:
    branches: [ develop ]
    paths:
      - '4401_CRM/next/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '4401_CRM/next/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Lint code
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_TEST }}
        AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID_TEST }}
        AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET_TEST }}
        AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID_TEST }}
        DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '4401_CRM/next/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Dependency vulnerability check
      run: npx audit-ci --config .audit-ci.json
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: ./4401_CRM/next
        file: ./4401_CRM/next/Dockerfile
        push: false
        tags: crm-app:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name crm-test -p 3000:3000 \
          -e NEXTAUTH_SECRET=test-secret \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/testdb \
          crm-app:test
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop crm-test

  notify-status:
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ CI pipeline completed successfully!"
        echo "Ready for deployment to staging/production"

    - name: Notify failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ CI pipeline failed!"
        echo "Please check the logs and fix issues before deployment"
        exit 1