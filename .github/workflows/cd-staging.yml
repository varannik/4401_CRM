name: CD - Deploy to Azure Staging

on:
  push:
    branches: [ develop ]
    paths:
      - '4401_CRM/next/**'
      - '4401_CRM/infrastructure/**'
      - '.github/workflows/**'

env:
  AZURE_REGION: eastus2
  ENVIRONMENT: staging
  NODE_VERSION: '18'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      registry-name: ${{ steps.terraform.outputs.registry-name }}
      app-name: ${{ steps.terraform.outputs.app-name }}
      resource-group: ${{ steps.terraform.outputs.resource-group }}

    defaults:
      run:
        working-directory: ./4401_CRM/infrastructure/azure

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=staging.tfstate" \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var-file="environments/staging.tfvars" \
          -var="azure_ad_client_id=${{ secrets.AZURE_AD_CLIENT_ID_STAGING }}" \
          -var="azure_ad_client_secret=${{ secrets.AZURE_AD_CLIENT_SECRET_STAGING }}" \
          -var="azure_ad_tenant_id=${{ secrets.AZURE_AD_TENANT_ID }}" \
          -var="nextauth_secret=${{ secrets.NEXTAUTH_SECRET_STAGING }}" \
          -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD_STAGING }}" \
          -out=tfplan

    - name: Terraform Apply
      id: terraform
      run: |
        terraform apply -auto-approve tfplan
        
        # Export outputs
        echo "registry-name=$(terraform output -raw container_registry_name)" >> $GITHUB_OUTPUT
        echo "app-name=$(terraform output -raw container_app_name)" >> $GITHUB_OUTPUT
        echo "resource-group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ needs.deploy-infrastructure.outputs.registry-name }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./4401_CRM/next
        file: ./4401_CRM/next/Dockerfile
        push: true
        tags: |
          ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ env.ENVIRONMENT }}
          ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Deploy to Azure Container Apps
      run: |
        # Update container app with new image
        az containerapp update \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --image ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ github.sha }} \
          --revision-suffix $(date +%s)

    - name: Run database migrations
      run: |
        # Get database connection string from Key Vault
        DB_CONNECTION=$(az keyvault secret show \
          --vault-name crm-kv-${{ env.ENVIRONMENT }} \
          --name DATABASE-URL \
          --query value -o tsv)
        
        # Install dependencies for migration
        npm ci --legacy-peer-deps
        
        # Run Prisma migrations
        DATABASE_URL="$DB_CONNECTION" npx prisma migrate deploy

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy]

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Get application URL
      id: get-url
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        echo "🏥 Performing health check..."
        for i in {1..10}; do
          if curl -f -s "${{ steps.get-url.outputs.app-url }}/api/health"; then
            echo "✅ Health check passed!"
            exit 0
          fi
          echo "⏳ Attempt $i/10 failed, waiting 30s..."
          sleep 30
        done
        echo "❌ Health check failed after 10 attempts"
        exit 1

    - name: Test webhook endpoint
      run: |
        echo "📧 Testing webhook endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -X GET "${{ steps.get-url.outputs.app-url }}/api/email-webhook")
        
        if [ "$response" = "200" ]; then
          echo "✅ Webhook endpoint is accessible"
        else
          echo "❌ Webhook endpoint returned: $response"
          exit 1
        fi

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy, health-check]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.health-check.result == 'success' }}
      run: |
        echo "🚀 Deployment to staging completed successfully!"
        echo "🔗 Application URL: Available in Azure Portal"
        echo "📊 Dashboard: Check Azure Monitor for metrics"

    - name: Notify failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ Deployment to staging failed!"
        echo "Please check the logs and Azure resources"
        exit 1