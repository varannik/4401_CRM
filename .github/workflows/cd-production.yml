name: CD - Deploy to Azure Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      skip_tests:
        description: 'Skip CI tests'
        type: boolean
        default: false

env:
  AZURE_REGION: eastus2
  ENVIRONMENT: prod
  NODE_VERSION: '18'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '4401_CRM/next/package-lock.json'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run production build test
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_PROD }}
        AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID_PROD }}
        AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET_PROD }}
        AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

    - name: Security scan
      run: npm audit --audit-level=high

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: always() && (needs.pre-deployment-checks.result == 'success' || inputs.skip_tests)
    outputs:
      registry-name: ${{ steps.terraform.outputs.registry-name }}
      app-name: ${{ steps.terraform.outputs.app-name }}
      resource-group: ${{ steps.terraform.outputs.resource-group }}

    defaults:
      run:
        working-directory: ./4401_CRM/infrastructure/azure

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=prod.tfstate" \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var-file="environments/prod.tfvars" \
          -var="azure_ad_client_id=${{ secrets.AZURE_AD_CLIENT_ID_PROD }}" \
          -var="azure_ad_client_secret=${{ secrets.AZURE_AD_CLIENT_SECRET_PROD }}" \
          -var="azure_ad_tenant_id=${{ secrets.AZURE_AD_TENANT_ID }}" \
          -var="nextauth_secret=${{ secrets.NEXTAUTH_SECRET_PROD }}" \
          -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD_PROD }}" \
          -out=tfplan

    - name: Terraform Apply
      id: terraform
      run: |
        terraform apply -auto-approve tfplan
        
        # Export outputs
        echo "registry-name=$(terraform output -raw container_registry_name)" >> $GITHUB_OUTPUT
        echo "app-name=$(terraform output -raw container_app_name)" >> $GITHUB_OUTPUT
        echo "resource-group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    defaults:
      run:
        working-directory: ./4401_CRM/next

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ needs.deploy-infrastructure.outputs.registry-name }}

    - name: Get version tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./4401_CRM/next
        file: ./4401_CRM/next/Dockerfile
        push: true
        tags: |
          ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ env.ENVIRONMENT }}
          ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ steps.version.outputs.version }}
          ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Create backup of current deployment
      run: |
        # Get current revision
        CURRENT_REVISION=$(az containerapp revision list \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --query "[?properties.active].name | [0]" -o tsv)
        
        echo "üìã Current active revision: $CURRENT_REVISION"
        echo "current-revision=$CURRENT_REVISION" >> $GITHUB_ENV

    - name: Deploy to Azure Container Apps (Blue-Green)
      run: |
        # Deploy new revision with traffic at 0%
        az containerapp update \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --image ${{ needs.deploy-infrastructure.outputs.registry-name }}.azurecr.io/crm-app:${{ steps.version.outputs.version }} \
          --revision-suffix prod-$(date +%s) \
          --traffic-weight 0

  health-check-and-switch:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy]

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Get new revision name
      id: new-revision
      run: |
        NEW_REVISION=$(az containerapp revision list \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --query "[?properties.trafficWeight==\`0\`].name | [0]" -o tsv)
        echo "new-revision=$NEW_REVISION" >> $GITHUB_OUTPUT

    - name: Health check new revision
      run: |
        echo "üè• Performing health check on new revision..."
        
        # Get revision URL (assuming it follows Azure naming pattern)
        REVISION_URL="https://${{ steps.new-revision.outputs.new-revision }}--$(echo '${{ needs.deploy-infrastructure.outputs.app-name }}' | tr '[:upper:]' '[:lower:]').azurecontainerapps.io"
        
        for i in {1..15}; do
          if curl -f -s "$REVISION_URL/api/health"; then
            echo "‚úÖ Health check passed for new revision!"
            break
          fi
          echo "‚è≥ Health check attempt $i/15 failed, waiting 20s..."
          sleep 20
          if [ $i -eq 15 ]; then
            echo "‚ùå Health check failed after 15 attempts"
            exit 1
          fi
        done

    - name: Switch traffic to new revision
      run: |
        echo "üîÑ Switching 100% traffic to new revision..."
        az containerapp revision set-mode \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --mode multiple
        
        az containerapp traffic set \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --revision-weight ${{ steps.new-revision.outputs.new-revision }}=100

    - name: Final health check
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        
        echo "üè• Final health check on production URL..."
        for i in {1..10}; do
          if curl -f -s "https://$APP_URL/api/health"; then
            echo "‚úÖ Production health check passed!"
            echo "üöÄ Deployment successful!"
            echo "production-url=https://$APP_URL" >> $GITHUB_ENV
            exit 0
          fi
          echo "‚è≥ Attempt $i/10 failed, waiting 30s..."
          sleep 30
        done
        echo "‚ùå Production health check failed"
        exit 1

  run-migrations:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, health-check-and-switch]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '4401_CRM/next/package-lock.json'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Run database migrations
      working-directory: ./4401_CRM/next
      run: |
        # Install dependencies
        npm ci --legacy-peer-deps
        
        # Get database connection string from Key Vault
        DB_CONNECTION=$(az keyvault secret show \
          --vault-name crm-kv-${{ env.ENVIRONMENT }} \
          --name DATABASE-URL \
          --query value -o tsv)
        
        # Run Prisma migrations
        DATABASE_URL="$DB_CONNECTION" npx prisma migrate deploy
        
        echo "‚úÖ Database migrations completed"

  cleanup-old-revisions:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, run-migrations]

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Clean up old revisions
      run: |
        echo "üßπ Cleaning up old revisions (keeping last 3)..."
        az containerapp revision list \
          --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --query "[?properties.trafficWeight==\`0\`] | sort_by(@, &properties.createdTime) | [0:-3].[name]" -o tsv | \
        while read revision; do
          if [ ! -z "$revision" ]; then
            echo "üóëÔ∏è Deactivating revision: $revision"
            az containerapp revision deactivate \
              --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
              --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
              --revision "$revision"
          fi
        done

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy, health-check-and-switch, run-migrations]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.health-check-and-switch.result == 'success' }}
      run: |
        echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL!"
        echo "üîó Application URL: ${{ env.production-url }}"
        echo "üìä Version deployed: ${{ steps.version.outputs.version }}"
        echo "üè• Health checks: Passed"
        echo "üíæ Database migrations: Completed"

    - name: Notify failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
        echo "üö® Immediate action required"
        echo "üìã Check logs and rollback if necessary"
        exit 1